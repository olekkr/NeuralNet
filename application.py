
from statistics import mode
import torch
import torch.nn as nn
from numpy.random import randint
from NeuralNet import * 


if torch.cuda.is_available():
    device = torch.device("cuda")

modelElems = [
    nn.Linear(1000,200), 
    nn.ReLU(),
    nn.Linear(200,1080), 
    nn.ReLU(),
    nn.Linear(1080,200), 
    nn.ReLU(),
    nn.Linear(200,1),
    nn.Sigmoid()
    ]
model = Model(modelElems, device=device)


#print(model.forward(torch.randint(low=0, high=2, size=(5,20), dtype=torch.float)))


train = TrainHandler(
    model=model, 
    train_data=testDataSet(1000, 1000, device=device), # autogenerated testdata
    optimizer=torch.optim.SGD,
    loss=torch.nn.BCELoss,
    num_epochs=100,
    batch_size=1, 
    learning_rate=0.001,
    shuffleData=True
    )
print(train.train())

#print([p for p in model.parameters()])
#print(torch.optim.SGD(model.parameters(),lr=0.0001))

evaluator = EvalHandler(
    model=model,
    val_data=testDataSet(1000, 1000, device=device)
    )

a = evaluator.evaluate(ConfusionMetric())

print(type(a))
print(f"{a}")